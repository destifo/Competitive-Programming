from collections import defaultdict
from typing import List


class Solution:
    
    def colorConnected(self, node: int, color: int, graph: List[List[int]], colors: List[int]) -> int:
        
        count = 1
        colors[node] = color
        for i in range(len(graph)):
            val = graph[node][i]
            if val == 0 or colors[i] != 0 or i == node:
                continue
                
            count += self.colorConnected(i, color, graph, colors)
        
        return count
    
    
    # O(n^2 + len(initial)loglen(initial)) time,
    # O(n^2) space,
    # Approach: dfs coloring, 
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        colors = [0 for _ in range(len(graph))]
        colors_count = defaultdict(int)
        color = 1
        
        for infected in initial:
            if colors[infected] != 0:
                continue
                
            colors_count[color] = self.colorConnected(infected, color, graph, colors)
            color += 1
            
        count_to_color = []
        color_in_initial = defaultdict(int)
        for infected in initial:
            color_in_initial[colors[infected]] += 1
        for color, count in colors_count.items():
            if color_in_initial[color] < 2:
                count_to_color.append((count, color))
        
        count_to_color.sort()
        if count_to_color:
            highest_count = count_to_color[-1][0]
        high_count_colors = set()
        for i in range(len(count_to_color)-1, -1, -1):
            if count_to_color[i][0] == highest_count:
                high_count_colors.add(count_to_color[i][1])
            else:
                break
        
        initial.sort()
        for node in initial:
            if colors[node] in high_count_colors:
                return node
            
        return initial[0]